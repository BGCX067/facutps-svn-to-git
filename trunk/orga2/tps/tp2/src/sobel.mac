;; Filtro en X. El resultado final lo deja en xmm0
;; Requiere que:
;; > esi = la matriz origen
;; > ecx = contador del ciclo 
;; > edx = width de la imagen

%macro filtroX 0
	push esi
	
	;; Vamos a hacer 2 accesos a memoria y traer los datos corridos solo por dos
	;; pixeles, de esta manera podemos procesar una mayor cantidad de pixeles.

	; La primer linea no necesitamos pasarla a 32 bits, calculamos todo junto
	lea esi, [esi + ecx]				; avanzamos a la 1 linea
	movdqu xmm4, [esi]				; xmm4 auxiliar, (1..16)
	movdqu xmm1, [esi + 2]			; xmm1 = numeros (3..18)
	psubusb  xmm1, xmm4				; xmm1 = 3-1 | 4-2 | 5-3 | 6-4 | ... | 

	; La segunda linea calculamos todo junto, y despues la multiplicamos por 2
	lea esi, [esi + edx]				; avanzamos a la 2 linea
	movdqu xmm4, [esi]				; xmm4 auxiliar, (17..32)
	movdqu xmm2, [esi + 2]			; xmm2 = numeros (19..35)
	psubusb  xmm2, xmm4				; xmm2 = 19-17 | 20-18 | 21-19 | 22-20 | ... |
	
	; La tercer linea no necesitamos pasarla a 32 bits.
	lea esi, [esi + edx]				; avanzamos a la 3 linea      	
	movdqu xmm4, [esi]				; xmm4 auxiliar, (33..48)
	movdqu xmm3, [esi + 2]			; xmm3 = numeros (35..48 @ @)
	psubusb  xmm3, xmm4				; xmm3 = 35-33 | 36-34 | 37-35 | 38-36 | ... |

	; sumamos las lineas 1, 2 y 3
	; La segunda fila la sumamos 2 veces, porque no podemos hacer un shift, 
	; dado que habria problemas con la saturacion.
	paddsb xmm1, xmm2				; xmm1 = xmm1 + xmm2
	paddsb xmm1, xmm2				; xmm1 = xmm1 + (2*xmm2 )
	paddusb xmm1, xmm3				; xmm1 = xmm1 + 2*xmm2 + xmm3 

	movdqu xmm0, xmm1					; guardamos el resultado

	pop esi	

%endmacro

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
	
; xmm0 = resultado final de X

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; Filtro en Y. El resultado final lo suma en xmm0
;; Requiere que:
;; > esi = la matriz origen
;; > ecx = contador del ciclo 
;; > edx = width de la imagen
;; > xmm0 = 0 (solo para obtener el filtro de Y unicamente)

%macro filtroY 0
	push esi
	;; Vamos a hacer 3 accesos a memoria por cada linea y traer los datos corridos solo por 1 y por 2
	;; pixeles, de esta manera podemos procesar una mayor cantidad de pixeles.

	; Primer columna
	lea esi, [esi + ecx]				; avanzamos a la 1 columna
	movdqu xmm4, [esi]				; xmm4 auxiliar
	movdqu xmm1, [esi + 2*edx]		; xmm1 = tercer linea
	psubusb  xmm1, xmm4				; xmm1 = 33-1 | 34-2 | 35-3 | 36-4 | ... | 

	; Segunda columna.
	lea esi, [esi + 1]				; avanzamos a la 2 columna
	movdqu xmm4, [esi]				; xmm4 auxiliar, (17..32)
	movdqu xmm2, [esi + 2*edx]		; xmm2 = numeros (19..35)
	psubusb  xmm2, xmm4				; xmm2 = 19-17 | 20-18 | 21-19 | 22-20 | ... |

	; Tercer columna	
	lea esi, [esi + 1]				; avanzamos a la 3 columna
	movdqu xmm4, [esi]				; xmm4 auxiliar, (33..48)
	movdqu xmm3, [esi + 2*edx]		; xmm3 = numeros (35..48 @ @)
	psubusb  xmm3, xmm4				; xmm3 = 35-33 | 36-34 | 37-35 | 38-36 | ... |

	; sumamos las lineas 1, 2 y 3

	paddusb xmm1, xmm2				; xmm1 = xmm1 + xmm2
	paddusb xmm1, xmm2				; xmm1 = xmm1 + (2*xmm2)
	paddusb xmm1, xmm3				; xmm1 = xmm1 + 2*xmm2 + xmm3 
	
	paddusb xmm0, xmm1				; Resultado final XY
		
	pop esi

%endmacro






